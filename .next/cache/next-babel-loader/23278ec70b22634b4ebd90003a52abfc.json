{"ast":null,"code":"import Stripe from 'stripe';\nimport { v4 as uuidV4 } from 'uuid';\nimport Cart from '../../models/Cart';\nimport jwt from 'jsonwebtoken';\nimport Order from '../../models/Order';\nimport initDb from '../../helpers/initDB';\ninitDb();\nconst stripe = Stripe(process.env.STRIPE_SECRET);\nexport default (async (req, res) => {\n  const {\n    paymentInfo\n  } = req.body;\n  const {\n    authorization\n  } = req.headers;\n\n  if (!authorization) {\n    return res.status(401).json({\n      error: \"you must logged in\"\n    });\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate(\"products.product\");\n    let price = 0;\n    cart.products.forEach(item => {\n      price = price + item.quantity * item.product.price;\n    });\n    const prevCustomer = await stripe.customers.list({\n      email: paymentInfo.email\n    });\n    const isExistingCustomer = prevCustomer.data.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentInfo.email,\n        source: paymentInfo.id\n      });\n    }\n\n    await stripe.charges.create({\n      currency: \"INR\",\n      amount: price * 100,\n      receipt_email: paymentInfo.email,\n      customer: isExistingCustomer ? prevCustomer.data[0].id : newCustomer.id,\n      description: `you purchased a product | ${paymentInfo.email}`\n    }, {\n      idempotencyKey: uuidV4()\n    });\n    await new Order({\n      user: userId,\n      email: paymentInfo.email,\n      total: price,\n      products: cart.products\n    }).save();\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    });\n    res.status(200).json({\n      message: \"payment was successful\"\n    });\n  } catch (err) {\n    console.log(err);\n    return res.status(401).json({\n      error: \"error processing payment\"\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}