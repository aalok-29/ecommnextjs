{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport Authenticated from '../../helpers/Authenticated';\nimport initDb from '../../helpers/initDB';\ninitDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await fetchUserCart(req, res);\n      break;\n\n    case \"PUT\":\n      await addProduct(req, res);\n      break;\n\n    case \"DELETE\":\n      await removeProduct(req, res);\n      break;\n  }\n});\nconst fetchUserCart = Authenticated(async (req, res) => {\n  const cart = await Cart.findOne({\n    user: req.userId\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});\nconst addProduct = Authenticated(async (req, res) => {\n  const {\n    quantity,\n    productId\n  } = req.body;\n  const cart = await Cart.findOne({\n    user: req.userId\n  });\n  const pExists = cart.products.some(pdoc => productId === pdoc.product.toString());\n\n  if (pExists) {\n    await Cart.findOneAndUpdate({\n      _id: cart._id,\n      \"products.product\": productId\n    }, {\n      $inc: {\n        \"products.$.quantity\": quantity\n      }\n    });\n  } else {\n    const newProduct = {\n      quantity,\n      product: productId\n    };\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $push: {\n        products: newProduct\n      }\n    });\n  }\n\n  res.status(200).json({\n    message: \"product added to cart\"\n  });\n});\nconst removeProduct = Authenticated(async (req, res) => {\n  const {\n    productId\n  } = req.body;\n  const cart = await Cart.findOneAndUpdate({\n    user: req.userId\n  }, {\n    $pull: {\n      products: {\n        product: productId\n      }\n    }\n  }, {\n    new: true\n  }).populate(\"products.product\");\n  res.status(200).json(cart.products);\n});","map":null,"metadata":{},"sourceType":"module"}